%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2

is_fisheye: 1
imu_topic: "/mavros/imu/data"
# imu_topic: "/dji_sdk_1/dji_sdk/imu"
image0_topic: "/stereo/left/image_raw"
image1_topic: "/stereo/right/image_raw"
output_path: "/home/jiaping/mav/output"

depth_config: "depth_cuda.yaml"
cam0_calib: "up.yaml"
cam1_calib: "down.yaml"
image_width: 400 # For fisheye, this indicate the flattened image width; min 100; 300 - 500 is good for vins
image_height: 200
show_width: 1080

fisheye_fov: 220

enable_up_top: 1
enable_down_top: 0
enable_up_side: 1
enable_down_side: 1  
enable_rear_side: 0
thres_outlier : 5.0
tri_max_err: 3.0
# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0      # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ 0.6399679159102549, -0.17571916418044137,
       0.7480400002307461, -0.2785721449662304,
       0.4818110844064624, 0.8501176547320352,
       -0.21250424008940555, -0.2849401421389101,
       -0.598580943188602, 0.4964098593426948, 
       0.628711464822149, -0.15302320998256222, 0., 0., 0., 1. ]
body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ 0.8699823027148352, -0.34447713538283514, 
       0.3527978120133772, -0.14769059861856132,
       0.38999091406730596, 0.9185338174110674, 
       -0.06482833652961086, -0.27753973450119196
       -0.3017248413835651, 0.1939874466832459, 
       0.9334511184959686, -0.29326485646664624, 0., 0., 0., 1. ]




# body_T_cam0: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [1, 0, 0, 0.0392,
#          0, 1, 0, 0.0170,
#          0, 0, 1, 0.0662, 
#          0., 0., 0., 1 ]
# body_T_cam1: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [1, 0, 0, 0.0392,
#          0, -1, 0, 0.0170,
#          0, 0, -1, -0.0540, 
#          0., 0., 0., 1 ]

#Multiple thread support
multiple_thread: 1
#Gpu accleration support

use_vxworks: 0
use_gpu: 1

enable_depth: 0 # If estimate depth cloud; only available for dual fisheye now
rgb_depth_cloud: -1 # -1: point no texture,  0 depth cloud will be gray, 1 depth cloud will be colored;
#Note that textured and colored depth cloud will slow down whole system

depth_estimate_baseline: 0.05
top_cnt: 30
side_cnt: 30
max_solve_cnt: 30 # Max Point for solve; highly influence performace

# min_dist: 20            # min distance between two features, this is for GFTT
min_dist: 20            # for vworks
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 0           # publish tracking image as topic
flow_back: 0           # perform forward and backward optical flow to improve feature tracking accuracy
enable_perf_output: 1

#optimization parameters
max_solver_time: 0.04 # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
# max_solver_time: 1.0  # max solver itration time (ms), to guarantee real time
# max_num_iterations: 100   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 2.2348055359939677e-02          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 1.3851094547341666e-03         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 8.0722266484302906e-04        # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 1.6858976214445320e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.85         # gravity magnitude

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
# td: -0.0736        #-0.0736 when use DJI IMU                       # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)#
# td: 0.014686 #Use mynteye imu
td: -0.3530018945348184 # Use px4
#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/mav/output/pose_graph/" # save and load path
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 

#rectify
publish_rectify: 0              # whether publish rectified pose
cam0_rectify: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 1, 0, 0,
         0, 1, 0,
         0, 0, 1 ]

cam1_rectify: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 1, 0, 0,
         0, 1, 0,
         0, 0, 1 ]
